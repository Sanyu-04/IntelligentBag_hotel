<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HT32\52352\HT32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HT32\52352\HT32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Sun Jun 22 21:03:51 2025
<BR><P>
<H3>Maximum Stack Usage =        348 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
task2 &rArr; test_4G &rArr; Jansson2_Demo &rArr; json_dumps &rArr; json_dump_callback &rArr; do_dump &rArr;  do_dump (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[13]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">ADC_IRQHandler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[d7]">hashtable_do_clear</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d8]">json_decref</a><BR>
 <LI><a href="#[e3]">json_decref</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">json_delete</a><BR>
 <LI><a href="#[bb]">do_dump</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bb]">do_dump</a><BR>
 <LI><a href="#[44]">qsort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">qsort</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[13]">ADC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[19]">BFTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1a]">BFTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[28]">BootProcess</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[12]">COMP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[e]">EVWUP_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[f]">EXTI0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[10]">EXTI2_3_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[11]">EXTI4_15_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[d]">FLASH_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[16]">GPTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[15]">GPTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from ht32f5xxxx_01_it.o(i.HardFault_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1b]">I2C0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[24]">I2S_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[b]">LVD_BOD_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[14]">MCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from ht32f5xxxx_01_it.o(i.NMI_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[26]">PDMA_CH0_1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[27]">PDMA_CH2_5_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[39]">Reset_Handler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[23]">SCI_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[17]">SCTM0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[18]">SCTM1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1d]">SPI0_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from ht32f5xxxx_01_it.o(i.SysTick_Handler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[29]">SystemInit</a> from system_ht32f5xxxx_01.o(i.SystemInit) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[21]">UART0_IRQHandler</a> from 4g.o(i.UART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[22]">UART1_IRQHandler</a> from uart1.o(i.UART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[1f]">USART0_IRQHandler</a> from usart0.o(i.USART0_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[20]">USART1_IRQHandler</a> from usart1.o(i.USART1_IRQHandler) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[25]">USB_IRQHandler</a> from startup_ht32f5xxxx_01.o(RESET) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_ht32f5xxxx_01.o(RESET)
 <LI><a href="#[2d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[2e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[32]">dump_to_strbuffer</a> from dump.o(i.dump_to_strbuffer) referenced from dump.o(i.json_dumps)
 <LI><a href="#[2c]">fputc</a> from usart1.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4]">free</a> from malloc.o(i.free) referenced 2 times from memory.o(.data)
 <LI><a href="#[2b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3]">malloc</a> from malloc.o(i.malloc) referenced 2 times from memory.o(.data)
 <LI><a href="#[2f]">object_key_compare_keys</a> from dump.o(i.object_key_compare_keys) referenced from dump.o(i.do_dump)
 <LI><a href="#[30]">object_key_compare_serials</a> from dump.o(i.object_key_compare_serials) referenced from dump.o(i.do_dump)
 <LI><a href="#[37]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[33]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[38]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[31]">start_task</a> from freertos_demo.o(i.start_task) referenced from freertos_demo.o(i.freertos_start)
 <LI><a href="#[34]">task1</a> from freertos_demo.o(i.task1) referenced from freertos_demo.o(i.start_task)
 <LI><a href="#[35]">task2</a> from freertos_demo.o(i.task2) referenced from freertos_demo.o(i.start_task)
 <LI><a href="#[36]">task3</a> from freertos_demo.o(i.task3) referenced from freertos_demo.o(i.start_task)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))

<P><STRONG><a name="[13]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[19]"></a>BFTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>BFTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EVWUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>GPTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>GPTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PDMA_CH0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PDMA_CH2_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[3c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SCTM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SCTM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SCTM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[3e]"></a>SCTM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[40]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[25]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[41]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[128]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[129]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[120]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[121]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[123]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_rehash
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[44]"></a>qsort</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, qsort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = qsort &rArr;  qsort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>

<P><STRONG><a name="[12e]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_strndup
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_append_bytes
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_dtostr
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[134]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ba]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_string_for_22
</UL>

<P><STRONG><a name="[f1]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_dtostr
</UL>

<P><STRONG><a name="[a9]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendString
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_string
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_get
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_strdup
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[ac]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_find_pair
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_key_compare_keys
</UL>

<P><STRONG><a name="[64]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_convert
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[ad]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[135]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[136]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[137]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[139]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4b]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[42]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[13a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>ADS1115_GPIO_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ads1115.o(i.ADS1115_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADS1115_GPIO_Init &rArr; WriteADS1115 &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1115
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>AFIO_GPxConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ht32f5xxxx_gpio.o(i.AFIO_GPxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AFIO_GPxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Configuration
</UL>

<P><STRONG><a name="[5e]"></a>CKCU_GetClocksFrequency</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetClocksFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPLLFrequency
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
</UL>

<P><STRONG><a name="[5f]"></a>CKCU_GetPLLFrequency</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPLLFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>

<P><STRONG><a name="[62]"></a>CKCU_GetPeripFrequency</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ht32f5xxxx_ckcu.o(i.CKCU_GetPeripFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[7d]"></a>CKCU_PeripClockConfig</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, ht32f5xxxx_ckcu.o(i.CKCU_PeripClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[63]"></a>Chinese_convert</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, wl-125.o(i.Chinese_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Chinese_convert &rArr; UART1_SendString &rArr; UART1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendString
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_today_course_table
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[66]"></a>CourseTableDetection</STRONG> (Thumb, 642 bytes, Stack size 128 bytes, wl-125.o(i.CourseTableDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CourseTableDetection &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendString
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetRxFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendString
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_number
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_convert
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
</UL>

<P><STRONG><a name="[72]"></a>Delay_ms</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, delay.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>Delay_us</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, delay.o(i.Delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[74]"></a>Duan_xin</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, 4g.o(i.Duan_xin))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Duan_xin &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_time_string
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_string_for_22
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_key
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendStr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tel_Get
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_4G
</UL>

<P><STRONG><a name="[7b]"></a>Find_key</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, 4g.o(i.Find_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Find_key &rArr; Usart_SendStr &rArr; UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>GPIO_ClearOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ClearOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Turn_On
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
</UL>

<P><STRONG><a name="[7c]"></a>GPIO_Configuration</STRONG> (Thumb, 1076 bytes, Stack size 24 bytes, gpio.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_Configuration &rArr; CKCU_PeripClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>GPIO_DirectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_DirectionConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[7f]"></a>GPIO_InputConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_InputConfig))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[80]"></a>GPIO_PullResistorConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_PullResistorConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[84]"></a>GPIO_ReadInBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_ReadInBit))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_SetOutBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_gpio.o(i.GPIO_SetOutBits))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Turn_Off
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_GPIO_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
</UL>

<P><STRONG><a name="[70]"></a>HMI_send_number</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usarthmi.o(i.HMI_send_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HMI_send_number &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewCourse
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[71]"></a>HMI_send_string</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usarthmi.o(i.HMI_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HMI_send_string &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewCourse
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IIC_Read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ads1115.o(i.IIC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Read &rArr; SDA_IN
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
</UL>

<P><STRONG><a name="[85]"></a>IIC_Send_Ack</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ads1115.o(i.IIC_Send_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Send_Ack &rArr; SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
</UL>

<P><STRONG><a name="[86]"></a>IIC_Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ads1115.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Start &rArr; SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1115
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
</UL>

<P><STRONG><a name="[87]"></a>IIC_Stop</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ads1115.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Stop &rArr; SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1115
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
</UL>

<P><STRONG><a name="[88]"></a>IIC_Wait_Ack</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ads1115.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1115
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
</UL>

<P><STRONG><a name="[89]"></a>IIC_Write</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ads1115.o(i.IIC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Write &rArr; SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteADS1115
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
</UL>

<P><STRONG><a name="[8a]"></a>InputNewCourse</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, wl-125.o(i.InputNewCourse))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = InputNewCourse &rArr; printf_course_table &rArr; USART0_SendString &rArr; USART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_GetRxFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_number
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_course_table
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[8c]"></a>Jansson2_Demo</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, 4g.o(i.Jansson2_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = Jansson2_Demo &rArr; json_dumps &rArr; json_dump_callback &rArr; do_dump &rArr;  do_dump (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_string
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_integer
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dumps
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_delete
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendStr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_4G
</UL>

<P><STRONG><a name="[93]"></a>LED1_Turn_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LED1_Turn_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED1_Turn_Off
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>LED1_Turn_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led.o(i.LED1_Turn_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LED1_Turn_On
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearOutBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ht32f5xxxx_01_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>ReadADS1115</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ads1115.o(i.ReadADS1115))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadADS1115 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
</UL>

<P><STRONG><a name="[83]"></a>SDA_IN</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ads1115.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_IN
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InputConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read
</UL>

<P><STRONG><a name="[5b]"></a>SDA_OUT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ads1115.o(i.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetOutBits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DirectionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_GPIO_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Ack
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ht32f5xxxx_01_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SystemInit</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, system_ht32f5xxxx_01.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>Tel_Get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, 4g.o(i.Tel_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Tel_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
</UL>

<P><STRONG><a name="[98]"></a>UART0_Configuration</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, uart0.o(i.UART0_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART0_Configuration &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_init_buffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>UART0_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, 4g.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>UART0_SendByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart0.o(i.UART0_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendStr
</UL>

<P><STRONG><a name="[9d]"></a>UART0_init_buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart0.o(i.UART0_init_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Configuration
</UL>

<P><STRONG><a name="[a3]"></a>UART1_Configuration</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, uart1.o(i.UART1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART1_Configuration &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PullResistorConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_init_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>UART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, uart1.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>UART1_SendByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart1.o(i.UART1_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[65]"></a>UART1_SendString</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart1.o(i.UART1_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_SendString &rArr; UART1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_today_course_table
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_convert
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[a4]"></a>UART1_init_buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart1.o(i.UART1_init_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
</UL>

<P><STRONG><a name="[a5]"></a>USART0_Configuration</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usart0.o(i.USART0_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART0_Configuration &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_init_buffer
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TXRXTLConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>USART0_GetRxFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart0.o(i.USART0_GetRxFlag))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewCourse
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[1f]"></a>USART0_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart0.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>USART0_SendByte</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart0.o(i.USART0_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendString
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_today_course_table
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_course_table
</UL>

<P><STRONG><a name="[6e]"></a>USART0_SendString</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart0.o(i.USART0_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART0_SendString &rArr; USART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendByte
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_today_course_table
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_course_table
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
</UL>

<P><STRONG><a name="[a7]"></a>USART0_init_buffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart0.o(i.USART0_init_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>USART1_Configuration</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, usart1.o(i.USART1_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART1_Configuration &rArr; USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TxRxCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TXRXTLConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IntConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AFIO_GPxConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_init_buffer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_PeripClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, usart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_IRQHandler &rArr; print_today_course_table &rArr; USART0_SendString &rArr; USART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_today_course_table
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_key
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>USART1_SendByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart1.o(i.USART1_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART1_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>USART1_init_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart1.o(i.USART1_init_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>USART_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>USART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendByte
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendByte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>USART_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ht32f5xxxx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; CKCU_GetPeripFrequency &rArr; CKCU_GetClocksFrequency &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetPeripFrequency
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Configuration
</UL>

<P><STRONG><a name="[9c]"></a>USART_IntConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_IntConfig))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Configuration
</UL>

<P><STRONG><a name="[9f]"></a>USART_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>USART_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendByte
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendByte
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendByte
</UL>

<P><STRONG><a name="[a6]"></a>USART_TXRXTLConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ht32f5xxxx_usart.o(i.USART_TXRXTLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_TXRXTLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
</UL>

<P><STRONG><a name="[9b]"></a>USART_TxRxCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ht32f5xxxx_usart.o(i.USART_TxRxCmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Configuration
</UL>

<P><STRONG><a name="[7a]"></a>Usart_SendStr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, 4g.o(i.Usart_SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Usart_SendStr &rArr; UART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_key
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_4G
</UL>

<P><STRONG><a name="[5d]"></a>WriteADS1115</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ads1115.o(i.WriteADS1115))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WriteADS1115 &rArr; IIC_Wait_Ack &rArr; IIC_Stop &rArr; SDA_OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_GPIO_Init
</UL>

<P><STRONG><a name="[b0]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[13d]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[75]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_number
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewCourse
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[13e]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[13f]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b2]"></a>__0snprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[140]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[bd]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_dtostr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[141]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[142]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[b3]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[143]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d0]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_string
</UL>

<P><STRONG><a name="[144]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[145]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[57]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[60]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ht32f5xxxx_ckcu.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CKCU_GetClocksFrequency
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashlittle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[146]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[148]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[78]"></a>all_key</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, 4g.o(i.all_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = all_key
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
</UL>

<P><STRONG><a name="[b8]"></a>battery_adc</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, ads1115.o(i.battery_adc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = battery_adc &rArr; ReadADS1115 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendString
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadADS1115
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_number
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
</UL>

<P><STRONG><a name="[76]"></a>check_string_for_22</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, 4g.o(i.check_string_for_22))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = check_string_for_22 &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
</UL>

<P><STRONG><a name="[77]"></a>extract_time_string</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, 4g.o(i.extract_time_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = extract_time_string
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
</UL>

<P><STRONG><a name="[2c]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usart1.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[4]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>freertos_start</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, freertos_demo.o(i.freertos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = freertos_start &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>hashtable_close</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hashtable.o(i.hashtable_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hashtable_close &rArr; hashtable_do_clear &rArr;  json_decref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_clear
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_delete
</UL>

<P><STRONG><a name="[dd]"></a>hashtable_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, hashtable.o(i.hashtable_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hashtable_get &rArr; hashtable_find_pair &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_find_pair
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashlittle
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get
</UL>

<P><STRONG><a name="[de]"></a>hashtable_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hashtable.o(i.hashtable_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hashtable_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
</UL>

<P><STRONG><a name="[df]"></a>hashtable_iter</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hashtable.o(i.hashtable_iter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hashtable_iter
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter
</UL>

<P><STRONG><a name="[ea]"></a>hashtable_iter_key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hashtable.o(i.hashtable_iter_key))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter_key
</UL>

<P><STRONG><a name="[e0]"></a>hashtable_iter_next</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hashtable.o(i.hashtable_iter_next))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_iter
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter_next
</UL>

<P><STRONG><a name="[c9]"></a>hashtable_iter_serial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hashtable.o(i.hashtable_iter_serial))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[eb]"></a>hashtable_iter_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hashtable.o(i.hashtable_iter_value))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter_value
</UL>

<P><STRONG><a name="[e1]"></a>hashtable_set</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, hashtable.o(i.hashtable_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hashtable_set &rArr; json_decref &rArr; json_delete &rArr; hashtable_close &rArr; hashtable_do_clear &rArr;  json_decref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_decref
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_bucket
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_find_pair
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_rehash
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashlittle
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new_nocheck
</UL>

<P><STRONG><a name="[c5]"></a>json_array_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, value.o(i.json_array_get))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[c3]"></a>json_array_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, value.o(i.json_array_size))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[92]"></a>json_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, value.o(i.json_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = json_delete &rArr; hashtable_close &rArr; hashtable_do_clear &rArr;  json_decref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_close
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_decref
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_decref
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_decref
</UL>

<P><STRONG><a name="[e4]"></a>json_dump_callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dump.o(i.json_dump_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = json_dump_callback &rArr; do_dump &rArr;  do_dump (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dumps
</UL>

<P><STRONG><a name="[91]"></a>json_dumps</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, dump.o(i.json_dumps))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = json_dumps &rArr; json_dump_callback &rArr; do_dump &rArr;  do_dump (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_value
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_close
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_strdup
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dump_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
</UL>

<P><STRONG><a name="[8e]"></a>json_integer</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, value.o(i.json_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_integer
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
</UL>

<P><STRONG><a name="[bc]"></a>json_integer_value</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, value.o(i.json_integer_value))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[8d]"></a>json_object</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, value.o(i.json_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = json_object &rArr; json_object_seed
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_seed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
</UL>

<P><STRONG><a name="[cc]"></a>json_object_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, value.o(i.json_object_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = json_object_get &rArr; hashtable_get &rArr; hashtable_find_pair &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_get
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[c6]"></a>json_object_iter</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.json_object_iter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = json_object_iter &rArr; hashtable_iter
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_iter
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[ca]"></a>json_object_iter_key</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, value.o(i.json_object_iter_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_object_iter_key
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_iter_key
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[cb]"></a>json_object_iter_next</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, value.o(i.json_object_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_object_iter_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_iter_next
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[ce]"></a>json_object_iter_value</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, value.o(i.json_object_iter_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_object_iter_value
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_iter_value
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[e9]"></a>json_object_seed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hashtable_seed.o(i.json_object_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = json_object_seed
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seed_from_timestamp_and_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
</UL>

<P><STRONG><a name="[8f]"></a>json_object_set_new</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, value.o(i.json_object_set_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = json_object_set_new &rArr; json_object_set_new_nocheck &rArr; hashtable_set &rArr; json_decref &rArr; json_delete &rArr; hashtable_close &rArr; hashtable_do_clear &rArr;  json_decref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_string
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new_nocheck
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_decref
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
</UL>

<P><STRONG><a name="[ee]"></a>json_object_set_new_nocheck</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, value.o(i.json_object_set_new_nocheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = json_object_set_new_nocheck &rArr; hashtable_set &rArr; json_decref &rArr; json_delete &rArr; hashtable_close &rArr; hashtable_do_clear &rArr;  json_decref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_decref
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new
</UL>

<P><STRONG><a name="[c7]"></a>json_object_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, value.o(i.json_object_size))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[be]"></a>json_real_value</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, value.o(i.json_real_value))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[90]"></a>json_string</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.json_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = json_string &rArr; json_stringn &rArr; string_create &rArr; jsonp_strndup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_stringn
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
</UL>

<P><STRONG><a name="[c0]"></a>json_string_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, value.o(i.json_string_length))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[c1]"></a>json_string_value</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, value.o(i.json_string_value))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[ef]"></a>json_stringn</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, value.o(i.json_stringn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = json_stringn &rArr; string_create &rArr; jsonp_strndup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_string
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_create
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_string
</UL>

<P><STRONG><a name="[bf]"></a>jsonp_dtostr</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, strconv.o(i.jsonp_dtostr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = jsonp_dtostr &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[cd]"></a>jsonp_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory.o(i.jsonp_free))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_delete
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_rehash
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_clear
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_close
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_create
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_close
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_append_bytes
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[c8]"></a>jsonp_malloc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memory.o(i.jsonp_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_integer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_rehash
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_strndup
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_append_bytes
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[e7]"></a>jsonp_strdup</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memory.o(i.jsonp_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jsonp_strdup &rArr; jsonp_strndup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_strndup
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dumps
</UL>

<P><STRONG><a name="[f3]"></a>jsonp_strndup</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, memory.o(i.jsonp_strndup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = jsonp_strndup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_create
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_strdup
</UL>

<P><STRONG><a name="[2b]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; freertos_start &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendByte
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Configuration
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_Configuration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Configuration
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Configuration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Turn_On
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED1_Turn_Off
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADS1115_GPIO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memory.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>print_today_course_table</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, wl-125.o(i.print_today_course_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = print_today_course_table &rArr; USART0_SendString &rArr; USART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendByte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendString
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chinese_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>printf_course_table</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wl-125.o(i.printf_course_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printf_course_table &rArr; USART0_SendString &rArr; USART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendString
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewCourse
</UL>

<P><STRONG><a name="[111]"></a>pvPortMalloc</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[102]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[ec]"></a>seed_from_timestamp_and_pid</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, jansson_config.o(i.seed_from_timestamp_and_pid))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_seed
</UL>

<P><STRONG><a name="[31]"></a>start_task</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, freertos_demo.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = start_task &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.freertos_start)
</UL>
<P><STRONG><a name="[d1]"></a>strbuffer_append_bytes</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strbuffer.o(i.strbuffer_append_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strbuffer_append_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_to_strbuffer
</UL>

<P><STRONG><a name="[e8]"></a>strbuffer_close</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strbuffer.o(i.strbuffer_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strbuffer_close
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dumps
</UL>

<P><STRONG><a name="[e5]"></a>strbuffer_init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, strbuffer.o(i.strbuffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strbuffer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dumps
</UL>

<P><STRONG><a name="[e6]"></a>strbuffer_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strbuffer.o(i.strbuffer_value))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dumps
</UL>

<P><STRONG><a name="[34]"></a>task1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, freertos_demo.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = task1 &rArr; InputNewCourse &rArr; printf_course_table &rArr; USART0_SendString &rArr; USART0_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputNewCourse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.start_task)
</UL>
<P><STRONG><a name="[35]"></a>task2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, freertos_demo.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = task2 &rArr; test_4G &rArr; Jansson2_Demo &rArr; json_dumps &rArr; json_dump_callback &rArr; do_dump &rArr;  do_dump (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HMI_send_string
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_4G
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.start_task)
</UL>
<P><STRONG><a name="[36]"></a>task3</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, freertos_demo.o(i.task3))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = task3 &rArr; CourseTableDetection &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_adc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_demo.o(i.start_task)
</UL>
<P><STRONG><a name="[115]"></a>test_4G</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, 4g.o(i.test_4G))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = test_4G &rArr; Jansson2_Demo &rArr; json_dumps &rArr; json_dump_callback &rArr; do_dump &rArr;  do_dump (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendStr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jansson2_Demo
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
</UL>

<P><STRONG><a name="[116]"></a>utf8_check_first</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, utf.o(i.utf8_check_first))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_string
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_iterate
</UL>

<P><STRONG><a name="[117]"></a>utf8_check_full</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, utf.o(i.utf8_check_full))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utf8_check_full
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_string
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_iterate
</UL>

<P><STRONG><a name="[ed]"></a>utf8_check_string</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, utf.o(i.utf8_check_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = utf8_check_string &rArr; utf8_check_full
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_full
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_first
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_stringn
</UL>

<P><STRONG><a name="[cf]"></a>utf8_iterate</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, utf.o(i.utf8_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = utf8_iterate &rArr; utf8_check_full
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_full
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_check_first
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_string
</UL>

<P><STRONG><a name="[f5]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[118]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, freertos_demo.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[f8]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[101]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[f6]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[11b]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[69]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[6c]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[ff]"></a>vPortFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[119]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[f9]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[fc]"></a>vQueueAddToRegistry</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[10d]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[6d]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Duan_xin
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_4G
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task3
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[114]"></a>vTaskDelete</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[125]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[110]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[11d]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[11a]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[d4]"></a>vTaskStartScheduler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_start
</UL>

<P><STRONG><a name="[10b]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[43]"></a>vTaskSwitchContext</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[11f]"></a>xPortStartScheduler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[97]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fb]"></a>xQueueGenericCreate</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[124]"></a>xQueueGenericReset</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[109]"></a>xQueueReceive</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[126]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[d3]"></a>xTaskCreate</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freertos_start
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[96]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[67]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CourseTableDetection
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[122]"></a>xTaskIncrementTick</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[10f]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[10c]"></a>xTaskResumeAll</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[11e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[28]"></a>BootProcess</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, startup_ht32f5xxxx_01.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_ht32f5xxxx_01.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>prvTaskExitError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[112]"></a>prvHeapInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[113]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[fd]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[104]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[10e]"></a>prvUnlockQueue</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[f4]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[f7]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[fe]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[37]"></a>prvIdleTask</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[100]"></a>prvInitialiseNewTask</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[11c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[fa]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[103]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[105]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[107]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[10a]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[106]"></a>prvReloadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[108]"></a>prvSampleTimeNow</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvSampleTimeNow &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[38]"></a>prvTimerTask</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[bb]"></a>do_dump</STRONG> (Thumb, 846 bytes, Stack size 152 bytes, dump.o(i.do_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + In Cycle
<LI>Call Chain = do_dump &rArr;  do_dump (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_dtostr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_string_value
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_string_length
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_real_value
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_size
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter_value
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter_next
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter_key
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_iter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_integer_value
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_size
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_array_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_iter_serial
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_string
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_indent
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsort
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_dump_callback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[c4]"></a>dump_indent</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dump.o(i.dump_indent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dump_indent
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[c2]"></a>dump_string</STRONG> (Thumb, 270 bytes, Stack size 72 bytes, dump.o(i.dump_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dump_string &rArr; utf8_iterate &rArr; utf8_check_full
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utf8_iterate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_dump
</UL>

<P><STRONG><a name="[32]"></a>dump_to_strbuffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dump.o(i.dump_to_strbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dump_to_strbuffer &rArr; strbuffer_append_bytes &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strbuffer_append_bytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dump.o(i.json_dumps)
</UL>
<P><STRONG><a name="[2f]"></a>object_key_compare_keys</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dump.o(i.object_key_compare_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = object_key_compare_keys &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dump.o(i.do_dump)
</UL>
<P><STRONG><a name="[30]"></a>object_key_compare_serials</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dump.o(i.object_key_compare_serials))
<BR>[Address Reference Count : 1]<UL><LI> dump.o(i.do_dump)
</UL>
<P><STRONG><a name="[e3]"></a>json_decref</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, value.o(i.json_decref))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = json_decref &rArr;  json_delete (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_delete
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_object_set_new_nocheck
</UL>

<P><STRONG><a name="[f0]"></a>string_create</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, value.o(i.string_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = string_create &rArr; jsonp_strndup &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_strndup
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_stringn
</UL>

<P><STRONG><a name="[dc]"></a>bucket_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hashtable.o(i.bucket_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_bucket
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_find_pair
</UL>

<P><STRONG><a name="[d5]"></a>hashlittle</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, hashtable.o(i.hashlittle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hashlittle &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_get
</UL>

<P><STRONG><a name="[d7]"></a>hashtable_do_clear</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hashtable.o(i.hashtable_do_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = hashtable_do_clear &rArr;  json_decref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_decref
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_close
</UL>

<P><STRONG><a name="[d9]"></a>hashtable_do_rehash</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hashtable.o(i.hashtable_do_rehash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hashtable_do_rehash &rArr; insert_to_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_bucket
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsonp_free
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
</UL>

<P><STRONG><a name="[db]"></a>hashtable_find_pair</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, hashtable.o(i.hashtable_find_pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hashtable_find_pair &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bucket_is_empty
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_get
</UL>

<P><STRONG><a name="[da]"></a>insert_to_bucket</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hashtable.o(i.insert_to_bucket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = insert_to_bucket
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bucket_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_rehash
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
</UL>

<P><STRONG><a name="[d8]"></a>json_decref</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hashtable.o(i.json_decref))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = json_decref &rArr; json_delete &rArr; hashtable_close &rArr; hashtable_do_clear &rArr;  json_decref (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_do_clear
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hashtable_set
</UL>

<P><STRONG><a name="[e2]"></a>list_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hashtable.o(i.list_insert))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_to_bucket
</UL>

<P><STRONG><a name="[b4]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b7]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[2e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
